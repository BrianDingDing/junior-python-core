"""
    Python内存垃圾回收机制
    1. 引用记数: 数据存储着变量绑定的次数, 如果为0该数据视为垃圾, 等待回收
    2. 标记清除: 对内存空间全盘扫描, 重点检测循环引用的数据, 标记出不被使用的数据, 等待回收.
    3. 分代回收: 程序运行时, 将内存空间分为小中大三代, 每次创建新数据, 都在小代分配空间.
       当内存告急时, 触发标记清除. 将有用的数据升代, 释放没用的数据.
    4. 内存优化
    (1) 尽少产生垃圾.
    (2) 对象池.
    (3) 配置垃圾回收器.
"""

# 情况1
data01 = 10
data02 = data01  # 数据引用计数为2
del data01, data02  # 数据引用计数为0, 数据10等待回收

# 情况2
data03 = []
data04 = []
data03.append(data04)  # 数据引用计数为2
data04.append(data03)  # 数据引用计数为2
# 循环引用: 虽然删除变量, 但是列表间相互引用, 由于数据引用计数为1, 垃圾不能回收, 长期占用内存
del data03, data04

# 情况4 (2)
# 对象池(除了: 列表/字典/自定义对象)
# 创建数据时, 会先在池中判断是否具有相同的数据, 如果有则直接返回地址, 没有才会开辟空间存储.
# 从而提高内存利用率(节省内存空间)
data05 = 10
data06 = 10
print(id(data05), id(data06))